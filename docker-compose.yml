networks:
    constrsw:
volumes:
    # No terminal, criar o volume externo: docker volume create constrsw-prometheus-data
    constrsw-prometheus-data:
        external: true
    # No terminal, criar o volume externo: docker volume create constrsw-keycloak-data
    constrsw-keycloak-data:
        external: true
    # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
    constrsw-postgresql-data:
        external: true
    # No terminal, criar o volume externo: docker volume create constrsw-mongodb-data
    constrsw-mongodb-data:
        external: true
    # No terminal, criar os volumes externos: docker volume create constrsw-sonarqube-data && docker volume create constrsw-sonarqube-extensions && docker volume create constrsw-sonarqube-logs
    constrsw-sonarqube-data:
        external: true
    constrsw-sonarqube-extensions:
        external: true
    constrsw-sonarqube-logs:
        external: true
services:
  # SonarQube
  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    environment:
      - SONAR_WEB_HOST=${SONAR_WEB_HOST}
      - SONAR_WEB_PORT=${SONAR_WEB_PORT}
      - SONAR_WEB_CONTEXT=${SONAR_WEB_CONTEXT}
      - SONAR_JDBC_URL=jdbc:postgresql://${POSTGRESQL_INTERNAL_HOST}:${POSTGRESQL_INTERNAL_PORT}/sonar
      - SONAR_JDBC_USERNAME=${POSTGRESQL_USERNAME}
      - SONAR_JDBC_PASSWORD=${POSTGRESQL_PASSWORD}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
    volumes:
      # No terminal, criar o volume externo: docker volume create constrsw-sonarqube-data
      - constrsw-sonarqube-data:/opt/sonarqube/data
      - constrsw-sonarqube-extensions:/opt/sonarqube/extensions
      - constrsw-sonarqube-logs:/opt/sonarqube/logs
    networks:
      - constrsw
    ports:
      - "9000:9000"
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${SONARQUBE_INTERNAL_PROTOCOL}://${SONARQUBE_INTERNAL_HOST}:${SONARQUBE_INTERNAL_PORT}/api/system/status || exit 1"]
      start_period: 120s
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always
  # Prometheus
  prometheus:
    container_name: prometheus
    build:
      context: ./backend/utils/prometheus
      dockerfile: Dockerfile
    image: constrsw/prometheus
    environment:
      - PROMETHEUS_INTERNAL_HOST=${PROMETHEUS_INTERNAL_HOST}
      - PROMETHEUS_EXTERNAL_HOST=${PROMETHEUS_EXTERNAL_HOST}
      - PROMETHEUS_INTERNAL_PORT=${PROMETHEUS_INTERNAL_PORT}
      - PROMETHEUS_EXTERNAL_PORT=${PROMETHEUS_EXTERNAL_PORT}
    volumes:
      - constrsw-prometheus-data:/prometheus
      - ./backend/utils/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./backend/utils/prometheus/alerts.yml:/etc/prometheus/alerts.yml
    networks:
      - constrsw
    ports:
      - ${PROMETHEUS_EXTERNAL_PORT}:${PROMETHEUS_INTERNAL_PORT}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
  # Keycloak
  keycloak:
    container_name: keycloak
    build:
      context: backend/utils/keycloak
      dockerfile: Dockerfile
    image: constrsw/keycloak
    command: start-dev --import-realm
    environment:
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED}
      - KC_METRICS_ENABLED=${KC_METRICS_ENABLED}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      # No terminal, criar o volume externo: docker volume create constrsw-keycloak-data
      - constrsw-keycloak-data:/opt/jboss/keycloak/standalone/data
      - ./backend/utils/keycloak:/opt/keycloak/data/import
    networks:
      - constrsw
    ports:
      - ${KEYCLOAK_EXTERNAL_CONSOLE_PORT}:${KEYCLOAK_INTERNAL_CONSOLE_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${KEYCLOAK_INTERNAL_HOST}:${KEYCLOAK_INTERNAL_API_PORT}/health" ]
      start_period: 300s
      interval: 10s
      timeout: 10s
      retries: 50
    restart: always
    # OAuth
  oauth:
    container_name: oauth
    build:
      context: ./backend/oauth
      dockerfile: Dockerfile
      target: development
    image: constrsw/oauth
    environment:
      - KEYCLOAK_BASE_URL=${KEYCLOAK_INTERNAL_PROTOCOL}://${KEYCLOAK_INTERNAL_HOST}:${KEYCLOAK_INTERNAL_API_PORT}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_GRANT_TYPE=${KEYCLOAK_GRANT_TYPE}
      - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
      - OAUTH_INTERNAL_API_PORT=${OAUTH_INTERNAL_API_PORT}
      - OAUTH_EXTERNAL_API_PORT=${OAUTH_EXTERNAL_API_PORT}
      - NODE_ENV=development
      - FRONTEND_EXTERNAL_PROTOCOL=${FRONTEND_EXTERNAL_PROTOCOL}
      - FRONTEND_EXTERNAL_HOST=${FRONTEND_EXTERNAL_HOST}
      - FRONTEND_EXTERNAL_PORT=${FRONTEND_EXTERNAL_PORT}
    networks:
      - constrsw
    ports:
      - "${OAUTH_EXTERNAL_API_PORT}:${OAUTH_INTERNAL_API_PORT}"
      - "${OAUTH_EXTERNAL_DEBUG_PORT}:${OAUTH_INTERNAL_DEBUG_PORT}"
    volumes:
      - ./backend/oauth/src:/app/src
      - ./backend/oauth/dist:/app/dist
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${OAUTH_INTERNAL_API_PORT}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
  # PostgreSQL
  postgresql:
    container_name: postgresql
    build:
      context: ./backend/utils/postgresql/
      dockerfile: Dockerfile
      args:
        POSTGRESQL_HOST_AUTH_METHOD: ${POSTGRESQL_HOST_AUTH_METHOD}
        POSTGRESQL_DATA: ${POSTGRESQL_DATA}
        POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
        POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
    image: constrsw/postgresql
    environment:
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRES_USER=${POSTGRESQL_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${POSTGRESQL_DB}
    volumes:
      # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
      - constrsw-postgresql-data:${POSTGRESQL_DATA}
    networks:
      - constrsw
    ports:
      - ${POSTGRESQL_EXTERNAL_PORT}:${POSTGRESQL_INTERNAL_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRESQL_USERNAME}" ]
      start_period: 30s
      interval: 20s
      timeout: 10s
      retries: 10
    restart: always
    # psql postgresql://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@${POSTGRESQL_INTERNAL_HOST}:${POSTGRESQL_INTERNAL_PORT}/${POSTGRESQL_DB}
    # psql -h ${POSTGRESQL_INTERNAL_HOST} -p ${POSTGRESQL_INTERNAL_PORT} -U ${POSTGRESQL_USERNAME} -d ${POSTGRESQL_DB}
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgresql-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@${POSTGRESQL_INTERNAL_HOST}:${POSTGRESQL_INTERNAL_PORT}/${POSTGRESQL_DB}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - constrsw
    depends_on:
      - postgresql
  # MongoDB
  mongodb:
    container_name: mongodb
    build:
      context: ./backend/utils/mongodb/
      dockerfile: Dockerfile
    image: constrsw/mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      # No terminal, criar o volume externo: docker volume create constrsw-mongodb-data
      - constrsw-mongodb-data:/data/mongodb
    networks:
      - constrsw
    ports:
      - ${MONGODB_EXTERNAL_PORT}:${MONGODB_INTERNAL_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --quiet mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_INTERNAL_HOST}:${MONGODB_INTERNAL_PORT}/${MONGODB_DB} --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'" ]
      start_period: 30s
      interval: 20s
      timeout: 10s
      retries: 20
    restart: always
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40.0
    container_name: mongodb-exporter
    environment:
      - MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_INTERNAL_HOST}:${MONGODB_INTERNAL_PORT}
    ports:
      - "9216:9216"
    networks:
      - constrsw
    depends_on:
      - mongodb
  # Grupo 6 
  # classes
  classes:
    container_name: classes
    build:
      context: ./backend/classes/
      dockerfile: Dockerfile
    image: constrsw/classes
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${CLASSES_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${CLASSES_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${CLASSES_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_DB=${MONGODB_DB}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - CLASSES_INTERNAL_PROTOCOL=${CLASSES_INTERNAL_PROTOCOL}
      - CLASSES_INTERNAL_HOST=${CLASSES_INTERNAL_HOST}
      - CLASSES_INTERNAL_API_PORT=${CLASSES_INTERNAL_API_PORT}
      - CLASSES_INTERNAL_DEBUG_PORT=${CLASSES_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${CLASSES_EXTERNAL_DEBUG_PORT}:${CLASSES_INTERNAL_DEBUG_PORT}
      - ${CLASSES_EXTERNAL_API_PORT}:${CLASSES_INTERNAL_API_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${CLASSES_INTERNAL_PROTOCOL}://${CLASSES_INTERNAL_HOST}:${CLASSES_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 3
  # courses
  courses:
    container_name: courses
    build:
      context: ./backend/courses/
      dockerfile: Dockerfile
    image: constrsw/courses
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${COURSES_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${COURSES_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${COURSES_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - COURSES_INTERNAL_PROTOCOL=${COURSES_INTERNAL_PROTOCOL}
      - COURSES_INTERNAL_HOST=${COURSES_INTERNAL_HOST}
      - COURSES_INTERNAL_API_PORT=${COURSES_INTERNAL_API_PORT}
      - COURSES_INTERNAL_DEBUG_PORT=${COURSES_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${COURSES_EXTERNAL_API_PORT}:${COURSES_INTERNAL_API_PORT}
      - ${COURSES_EXTERNAL_DEBUG_PORT}:${COURSES_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${COURSES_INTERNAL_PROTOCOL}://${COURSES_INTERNAL_HOST}:${COURSES_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 8
  # lessons
  lessons:
    container_name: lessons
    build:
      context: ./backend/lessons/
      dockerfile: Dockerfile
    image: constrsw/lessons
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${LESSONS_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${LESSONS_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${LESSONS_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - LESSONS_INTERNAL_PROTOCOL=${LESSONS_INTERNAL_PROTOCOL}
      - LESSONS_INTERNAL_HOST=${LESSONS_INTERNAL_HOST}
      - LESSONS_INTERNAL_API_PORT=${LESSONS_INTERNAL_API_PORT}
      - LESSONS_INTERNAL_DEBUG_PORT=${LESSONS_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${LESSONS_EXTERNAL_API_PORT}:${LESSONS_INTERNAL_API_PORT}
      - ${LESSONS_EXTERNAL_DEBUG_PORT}:${LESSONS_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${LESSONS_INTERNAL_PROTOCOL}://${LESSONS_INTERNAL_HOST}:${LESSONS_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 5
  # professors
  professors:
    container_name: professors
    build:
      context: ./backend/professors/
      dockerfile: Dockerfile
    image: constrsw/professors
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${PROFESSORS_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${PROFESSORS_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${PROFESSORS_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - PROFESSORS_INTERNAL_PROTOCOL=${PROFESSORS_INTERNAL_PROTOCOL}
      - PROFESSORS_INTERNAL_HOST=${PROFESSORS_INTERNAL_HOST}
      - PROFESSORS_INTERNAL_API_PORT=${PROFESSORS_INTERNAL_API_PORT}
      - PROFESSORS_INTERNAL_DEBUG_PORT=${PROFESSORS_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${PROFESSORS_EXTERNAL_API_PORT}:${PROFESSORS_INTERNAL_API_PORT}
      - ${PROFESSORS_EXTERNAL_DEBUG_PORT}:${PROFESSORS_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${PROFESSORS_INTERNAL_PROTOCOL}://${PROFESSORS_INTERNAL_HOST}:${PROFESSORS_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 1
  # reservations
  reservations:
    container_name: reservations
    build:
      context: ./backend/reservations/
      dockerfile: Dockerfile
    image: constrsw/reservations
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${RESERVATIONS_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${RESERVATIONS_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${RESERVATIONS_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - RESERVATIONS_INTERNAL_PROTOCOL=${RESERVATIONS_INTERNAL_PROTOCOL}
      - RESERVATIONS_INTERNAL_HOST=${RESERVATIONS_INTERNAL_HOST}
      - RESERVATIONS_INTERNAL_API_PORT=${RESERVATIONS_INTERNAL_API_PORT}
      - RESERVATIONS_INTERNAL_DEBUG_PORT=${RESERVATIONS_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${RESERVATIONS_EXTERNAL_API_PORT}:${RESERVATIONS_INTERNAL_API_PORT}
      - ${RESERVATIONS_EXTERNAL_DEBUG_PORT}:${RESERVATIONS_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${RESERVATIONS_INTERNAL_PROTOCOL}://${RESERVATIONS_INTERNAL_HOST}:${RESERVATIONS_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 2
  # resources
  resources:
    container_name: resources
    build:
      context: ./backend/resources/
      dockerfile: Dockerfile
    image: constrsw/resources
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${RESOURCES_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${RESOURCES_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${RESOURCES_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - RESOURCES_INTERNAL_PROTOCOL=${RESOURCES_INTERNAL_PROTOCOL}
      - RESOURCES_INTERNAL_HOST=${RESOURCES_INTERNAL_HOST}
      - RESOURCES_INTERNAL_API_PORT=${RESOURCES_INTERNAL_API_PORT}
      - RESOURCES_INTERNAL_DEBUG_PORT=${RESOURCES_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${RESOURCES_EXTERNAL_API_PORT}:${RESOURCES_INTERNAL_API_PORT}
      - ${RESOURCES_EXTERNAL_DEBUG_PORT}:${RESOURCES_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${RESOURCES_INTERNAL_PROTOCOL}://${RESOURCES_INTERNAL_HOST}:${RESOURCES_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 4
  # rooms
  rooms:
    container_name: rooms
    build:
      context: ./backend/rooms/
      dockerfile: Dockerfile
    image: constrsw/rooms
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${ROOMS_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${ROOMS_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${ROOMS_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - ROOMS_INTERNAL_PROTOCOL=${ROOMS_INTERNAL_PROTOCOL}
      - ROOMS_INTERNAL_HOST=${ROOMS_INTERNAL_HOST}
      - ROOMS_INTERNAL_API_PORT=${ROOMS_INTERNAL_API_PORT}
      - ROOMS_INTERNAL_DEBUG_PORT=${ROOMS_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${ROOMS_EXTERNAL_API_PORT}:${ROOMS_INTERNAL_API_PORT}
      - ${ROOMS_EXTERNAL_DEBUG_PORT}:${ROOMS_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${ROOMS_INTERNAL_PROTOCOL}://${ROOMS_INTERNAL_HOST}:${ROOMS_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # Grupo 7
  # students
  students:
    container_name: students
    build:
      context: ./backend/students/
      dockerfile: Dockerfile
    image: constrsw/students
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
      - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
      - POSTGRESQL_USERNAME=${STUDENTS_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${STUDENTS_POSTGRESQL_PASSWORD}
      - POSTGRESQL_DB=${STUDENTS_POSTGRESQL_DB}
      - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
      - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - STUDENTS_INTERNAL_PROTOCOL=${STUDENTS_INTERNAL_PROTOCOL}
      - STUDENTS_INTERNAL_HOST=${STUDENTS_INTERNAL_HOST}
      - STUDENTS_INTERNAL_API_PORT=${STUDENTS_INTERNAL_API_PORT}
      - STUDENTS_INTERNAL_DEBUG_PORT=${STUDENTS_INTERNAL_DEBUG_PORT}
    networks:
      - constrsw
    ports:
      - ${STUDENTS_EXTERNAL_API_PORT}:${STUDENTS_INTERNAL_API_PORT}
      - ${STUDENTS_EXTERNAL_DEBUG_PORT}:${STUDENTS_INTERNAL_DEBUG_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${STUDENTS_INTERNAL_PROTOCOL}://${STUDENTS_INTERNAL_HOST}:${STUDENTS_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 80s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  # BFF
  bff:
    container_name: ${BFF_NAME}
    build:
      context: ./backend/bff/
      dockerfile: Dockerfile
    image: constrsw/bff
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
      - OAUTH_INTERNAL_API_PORT=${OAUTH_INTERNAL_API_PORT}
      - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
      - CLASSES_INTERNAL_PROTOCOL=${CLASSES_INTERNAL_PROTOCOL}
      - CLASSES_INTERNAL_HOST=${CLASSES_INTERNAL_HOST}
      - CLASSES_INTERNAL_API_PORT=${CLASSES_INTERNAL_API_PORT}
      - COURSES_INTERNAL_HOST=${COURSES_INTERNAL_HOST}
      - COURSES_INTERNAL_API_PORT=${COURSES_INTERNAL_API_PORT}
      - COURSES_INTERNAL_PROTOCOL=${COURSES_INTERNAL_PROTOCOL}
      - LESSONS_INTERNAL_PROTOCOL=${LESSONS_INTERNAL_PROTOCOL}
      - LESSONS_INTERNAL_HOST=${LESSONS_INTERNAL_HOST}
      - LESSONS_INTERNAL_API_PORT=${LESSONS_INTERNAL_API_PORT}
      - PROFESSORS_INTERNAL_PROTOCOL=${PROFESSORS_INTERNAL_PROTOCOL}
      - PROFESSORS_INTERNAL_HOST=${PROFESSORS_INTERNAL_HOST}
      - PROFESSORS_INTERNAL_API_PORT=${PROFESSORS_INTERNAL_API_PORT}
      - RESERVATIONS_INTERNAL_PROTOCOL=${RESERVATIONS_INTERNAL_PROTOCOL}
      - RESERVATIONS_INTERNAL_HOST=${RESERVATIONS_INTERNAL_HOST}
      - RESERVATIONS_INTERNAL_API_PORT=${RESERVATIONS_INTERNAL_API_PORT}
      - RESOURCES_INTERNAL_PROTOCOL=${RESOURCES_INTERNAL_PROTOCOL}
      - RESOURCES_INTERNAL_HOST=${RESOURCES_INTERNAL_HOST}
      - RESOURCES_INTERNAL_API_PORT=${RESOURCES_INTERNAL_API_PORT}
      - ROOMS_INTERNAL_PROTOCOL=${ROOMS_INTERNAL_PROTOCOL}
      - ROOMS_INTERNAL_HOST=${ROOMS_INTERNAL_HOST}
      - ROOMS_INTERNAL_API_PORT=${ROOMS_INTERNAL_API_PORT}
      - STUDENTS_INTERNAL_PROTOCOL=${STUDENTS_INTERNAL_PROTOCOL}
      - STUDENTS_INTERNAL_HOST=${STUDENTS_INTERNAL_HOST}
      - STUDENTS_INTERNAL_API_PORT=${STUDENTS_INTERNAL_API_PORT}
      - BFF_INTERNAL_API_PORT=${BFF_INTERNAL_API_PORT}
    networks:
      - constrsw
    ports:
      - ${BFF_EXTERNAL_API_PORT}:${BFF_INTERNAL_API_PORT}
      - ${BFF_EXTERNAL_DEBUG_PORT}:${BFF_INTERNAL_DEBUG_PORT}
    depends_on:
      oauth:
        condition: service_healthy
      classes:
        condition: service_healthy
      courses:
        condition: service_healthy
      lessons:
        condition: service_healthy
      professors:
        condition: service_healthy
      reservations:
        condition: service_started
      resources:
        condition: service_healthy
      rooms:
        condition: service_started
      students:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${BFF_INTERNAL_PROTOCOL}://${BFF_INTERNAL_HOST}:${BFF_INTERNAL_API_PORT}/actuator/health" ]
      start_period: 90s
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
   # Frontend
  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL}
      - SONARQUBE_USER=${SONARQUBE_USER}
      - SONARQUBE_PASSWORD=${SONARQUBE_PASSWORD}
      - SONAR_TOKEN=${SONAR_TOKEN}
      - FRONTEND_EXTERNAL_HOST=${FRONTEND_EXTERNAL_HOST}
      - FRONTEND_INTERNAL_PORT=${FRONTEND_INTERNAL_PORT}
    image: constrsw/frontend
    ports:
      - "${FRONTEND_EXTERNAL_PORT}:${FRONTEND_INTERNAL_PORT}"
    networks:
      - constrsw
    depends_on:
      bff:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "${FRONTEND_INTERNAL_PROTOCOL}://${FRONTEND_INTERNAL_HOST}:${FRONTEND_INTERNAL_PORT}/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always

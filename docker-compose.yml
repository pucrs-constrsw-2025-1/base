networks:
    constrsw:
volumes:
    # No terminal, criar o volume externo: docker volume create constrsw-keycloak-data
    constrsw-keycloak-data:
        external: true
    # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
    constrsw-postgresql-data:
        external: true
    # No terminal, criar o volume externo: docker volume create constrsw-mongodb-data
    constrsw-mongodb-data:
        external: true
services:
  # keycloak
  keycloak:
    container_name: keycloak
    build:
      context: ./backend/utils/keycloak/
      dockerfile: Dockerfile
    image: constrsw/keycloak
    command: start-dev --import-realm
    environment:
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
    volumes:
      # No terminal, criar o volume externo: docker volume create constrsw-keycloak-data
      - constrsw-keycloak-data:/opt/jboss/keycloak/standalone/data
      - ./backend/utils/keycloak:/opt/keycloak/data/import
    networks:
      - constrsw
    ports:
      - ${KEYCLOAK_EXTERNAL_PORT}:${KEYCLOAK_INTERNAL_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${KEYCLOAK_INTERNAL_HOST}:${KEYCLOAK_INTERNAL_PORT}/health" ]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always
  # # OAuth
  oauth:
      container_name: oauth
      build:
        context: ./backend/oauth/
        dockerfile: Dockerfile
      image: constrsw/oauth
      environment:
        - KEYCLOAK_INTERNAL_HOST=${KEYCLOAK_INTERNAL_HOST}
        - KEYCLOAK_INTERNAL_PORT=${KEYCLOAK_INTERNAL_PORT}
        - KEYCLOAK_REALM=${KEYCLOAK_REALM}
        - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
        - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
        - KEYCLOAK_GRANT_TYPE=${KEYCLOAK_GRANT_TYPE}
        - OAUTH_INTERNAL_DEBUG_PORT=${OAUTH_INTERNAL_DEBUG_PORT} # Optional debug port
      networks:
        - constrsw
      ports:
        - ${OAUTH_INTERNAL_PORT}:${OAUTH_INTERNAL_PORT}
        - ${OAUTH_INTERNAL_DEBUG_PORT}:${OAUTH_INTERNAL_DEBUG_PORT} # Only if debugging
      depends_on:
        keycloak:
          condition: service_healthy
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://${OAUTH_INTERNAL_HOST}:${OAUTH_INTERNAL_PORT}/health" ]
        start_period: 60s
        interval: 20s
        timeout: 10s
        retries: 10
      restart: always
  # OAuth
    oauth:
      container_name: oauth
      build:
        context: ./backend/oauth/
        dockerfile: Dockerfile
      image: constrsw/oauth
      environment:
        - KEYCLOAK_INTERNAL_HOST=${KEYCLOAK_INTERNAL_HOST}
        - KEYCLOAK_INTERNAL_API_PORT=${KEYCLOAK_INTERNAL_API_PORT}
        - KEYCLOAK_REALM=${KEYCLOAK_REALM}
        - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
        - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
        - KEYCLOAK_GRANT_TYPE=${KEYCLOAK_GRANT_TYPE}
      networks:
        - constrsw
      ports:
        - ${OAUTH_EXTERNAL_API_PORT}:${OAUTH_INTERNAL_API_PORT}
      depends_on:
        keycloak:
          condition: service_healthy
      healthcheck:
        TEST: [ "CMD-SHELL", "curl -f http://${OAUTH_INTERNAL_HOST}:${OAUTH_INTERNAL_PORT}/health" ]
        start_period: 60s
        interval: 20s
        timeout: 10s
        retries: 10
      restart: always
  # # PostgreSQL
  # postgresql:
  #   container_name: postgresql
  #   build:
  #     context: ./backend/utils/postgresql/
  #     dockerfile: Dockerfile
  #     args:
  #       - POSTGRESQL_HOST_AUTH_METHOD=${POSTGRESQL_HOST_AUTH_METHOD}
  #       - POSTGRESQL_DATA=${POSTGRESQL_DATA}
  #   image: constrsw/postgresql
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=5432
  #     - POSTGRES_USER=${POSTGRESQL_USERNAME}
  #     - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=${POSTGRESQL_DB}
  #   volumes:
  #     # No terminal, criar o volume externo: docker volume create constrsw-postgresql-data
  #     - constrsw-postgresql-data:${POSTGRESQL_DATA}
  #   networks:
  #     - constrsw
  #   healthcheck:
  #     TEST: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #     start_period: 30s
  #     interval: 20s
  #     timeout: 10s
  #     retries: 10
  #   restart: always
  #   # psql postgresql://${POSTGRESQL_USERNAME}:${POSTGRESQL_USERNAME}@${POSTGRESQL_INTERNAL_HOST}:${POSTGRESQL_INTERNAL_PORT}
  #   # psql -h ${POSTGRESQL_INTERNAL_HOST} -p ${POSTGRESQL_INTERNAL_PORT} -U ${POSTGRESQL_USERNAME} -P ${POSTGRESQL_PASSWORD} -d database
  # # MongoDB
  # mongodb:
  #   container_name: mongodb
  #   build:
  #     context: ./backend/utils/mongodb/
  #     dockerfile: Dockerfile
  #   image: constrsw/mongodb
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
  #   volumes:
  #     # No terminal, criar o volume externo: docker volume create constrsw-mongodb-data
  #     - constrsw-mongodb-data:/data/mongodb
  #   networks:
  #     - constrsw
  #   healthcheck:
  #     TEST: [ "CMD-SHELL", "mongosh --quiet mongodb/TEST --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'" ]
  #     start_period: 30s
  #     interval: 20s
  #     timeout: 10s
  #     retries: 10
  #   restart: always
  # # Grupo 6 
  # # classes
  # classes:
  #   container_name: classes
  #   build:
  #     context: ./backend/classes/
  #     dockerfile: Dockerfile
  #   image: constrsw/classes
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=classes
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=classes
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${CLASSES_EXTERNAL_DEBUG_PORT}:${CLASSES_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${CLASSES_INTERNAL_HOST}:${CLASSES_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 3
  # # courses
  # courses:
  #   container_name: courses
  #   build:
  #     context: ./backend/courses/
  #     dockerfile: Dockerfile
  #   image: constrsw/courses
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=courses
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=courses
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${COURSES_EXTERNAL_DEBUG_PORT}:${COURSES_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${COURSES_INTERNAL_HOST}:${COURSES_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 8
  # # lessons
  # lessons:
  #   container_name: lessons
  #   build:
  #     context: ./backend/lessons/
  #     dockerfile: Dockerfile
  #   image: constrsw/lessons
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=lessons
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=lessons
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${LESSONS_EXTERNAL_DEBUG_PORT}:${LESSONS_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${LESSONS_INTERNAL_HOST}:${LESSONS_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 5
  # # professors
  # professors:
  #   container_name: professors
  #   build:
  #     context: ./backend/professors/
  #     dockerfile: Dockerfile
  #   image: constrsw/professors
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=professors
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=professors
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${PROFESSORS_EXTERNAL_DEBUG_PORT}:${PROFESSORS_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${PROFESSORS_INTERNAL_HOST}:${PROFESSORS_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 1
  # # reservations
  # reservations:
  #   container_name: reservations
  #   build:
  #     context: ./backend/reservations/
  #     dockerfile: Dockerfile
  #   image: constrsw/reservations
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=reservations
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=reservations
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${RESERVATIONS_EXTERNAL_DEBUG_PORT}:${RESERVATIONS_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${RESERVATIONS_INTERNAL_HOST}:${RESERVATIONS_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 2
  # # resources
  # resources:
  #   container_name: resources
  #   build:
  #     context: ./backend/resources/
  #     dockerfile: Dockerfile
  #   image: constrsw/resources
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=resources
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=resources
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${RESOURCES_EXTERNAL_DEBUG_PORT}:${RESOURCES_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${RESOURCES_INTERNAL_HOST}:${RESOURCES_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 4
  # # rooms
  # rooms:
  #   container_name: rooms
  #   build:
  #     context: ./backend/rooms/
  #     dockerfile: Dockerfile
  #   image: constrsw/rooms
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=rooms
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=rooms
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${ROOMS_EXTERNAL_DEBUG_PORT}:${ROOMS_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${ROOMS_INTERNAL_HOST}:${ROOMS_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Grupo 7
  # # students
  # students:
  #   container_name: students
  #   build:
  #     context: ./backend/students/
  #     dockerfile: Dockerfile
  #   image: constrsw/students
  #   environment:
  #     - POSTGRESQL_INTERNAL_HOST=${POSTGRESQL_INTERNAL_HOST}
  #     - POSTGRESQL_INTERNAL_PORT=${POSTGRESQL_INTERNAL_PORT}
  #     - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=students
  #     - MONGODB_INTERNAL_HOST=${MONGODB_INTERNAL_HOST}
  #     - MONGODB_INTERNAL_PORT=${MONGODB_INTERNAL_PORT}
  #     - MONGODB_USERNAME=${MONGODB_USERNAME}
  #     - MONGODB_PASSWORD=${MONGODB_PASSWORD}
  #     - MONGODB_DATABASE_NAME=students
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${STUDENTS_EXTERNAL_DEBUG_PORT}:${STUDENTS_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     oauth:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://${STUDENTS_INTERNAL_HOST}:${STUDENTS_INTERNAL_PORT}/health" ]
  #     start_period: 80s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # BFF
  # bff:
  #   container_name: ${BFF_NAME}
  #   build:
  #     context: ./backend/bff/
  #     dockerfile: Dockerfile
  #   image: constrsw/bff
  #   environment:
  #     - OAUTH_INTERNAL_PROTOCOL=${OAUTH_INTERNAL_PROTOCOL}
  #     - OAUTH_INTERNAL_PORT=${OAUTH_INTERNAL_PORT}
  #     - OAUTH_INTERNAL_HOST=${OAUTH_INTERNAL_HOST}
  #     - BFF_INTERNAL_PORT=${BFF_INTERNAL_PORT}
  #     - BFF_INTERNAL_DEBUG_PORT=${BFF_INTERNAL_DEBUG_PORT}
  #     - CLASSES_INTERNAL_PROTOCOL=${CLASSES_INTERNAL_PROTOCOL}
  #     - CLASSES_INTERNAL_HOST=${CLASSES_INTERNAL_HOST}
  #     - CLASSES_INTERNAL_PORT=${CLASSES_INTERNAL_PORT}
  #     - COURSES_INTERNAL_HOST=${COURSES_INTERNAL_HOST}
  #     - COURSES_INTERNAL_PORT=${COURSES_INTERNAL_PORT}
  #     - COURSES_INTERNAL_PROTOCOL=${COURSES_INTERNAL_PROTOCOL}
  #     - LESSONS_INTERNAL_PROTOCOL=${LESSONS_INTERNAL_PROTOCOL}
  #     - LESSONS_INTERNAL_HOST=${LESSONS_INTERNAL_HOST}
  #     - LESSONS_INTERNAL_PORT=${LESSONS_INTERNAL_PORT}
  #     - PROFESSORS_INTERNAL_PROTOCOL=${PROFESSORS_INTERNAL_PROTOCOL}
  #     - PROFESSORS_INTERNAL_HOST=${PROFESSORS_INTERNAL_HOST}
  #     - PROFESSORS_INTERNAL_PORT=${PROFESSORS_INTERNAL_PORT}
  #     - RESERVATIONS_INTERNAL_PROTOCOL=${RESERVATIONS_INTERNAL_PROTOCOL}
  #     - RESERVATIONS_INTERNAL_HOST=${RESERVATIONS_INTERNAL_HOST}
  #     - RESERVATIONS_INTERNAL_PORT=${RESERVATIONS_INTERNAL_PORT}
  #     - RESOURCES_INTERNAL_PROTOCOL=${RESOURCES_INTERNAL_PROTOCOL}
  #     - RESOURCES_INTERNAL_HOST=${RESOURCES_INTERNAL_HOST}
  #     - RESOURCES_INTERNAL_PORT=${RESOURCES_INTERNAL_PORT}
  #     - ROOMS_INTERNAL_PROTOCOL=${ROOMS_INTERNAL_PROTOCOL}
  #     - ROOMS_INTERNAL_HOST=${ROOMS_INTERNAL_HOST}
  #     - ROOMS_INTERNAL_PORT=${ROOMS_INTERNAL_PORT}
  #     - STUDENTS_INTERNAL_PROTOCOL=${STUDENTS_INTERNAL_PROTOCOL}
  #     - STUDENTS_INTERNAL_HOST=${STUDENTS_INTERNAL_HOST}
  #     - STUDENTS_INTERNAL_PORT=${STUDENTS_INTERNAL_PORT}
  #   networks:
  #     - constrsw
  #   ports:
  #     - ${BFF_EXTERNAL_PORT}:${BFF_INTERNAL_PORT}
  #     - ${BFF_EXTERNAL_DEBUG_PORT}:${BFF_INTERNAL_DEBUG_PORT}
  #   depends_on:
  #     oauth:
  #       condition: service_healthy
  #     classes:
  #       condition: service_healthy
  #     courses:
  #       condition: service_healthy
  #     lessons:
  #       condition: service_healthy
  #     professors:
  #       condition: service_healthy
  #     reservations:
  #       condition: service_healthy
  #     resources:
  #       condition: service_healthy
  #     rooms:
  #       condition: service_healthy
  #     students:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl -f http://localhost:${BFF_INTERNAL_PORT}/health" ]
  #     start_period: 90s
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  # # Frontend
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend/
  #     dockerfile: Dockerfile
  #   image: constrsw/frontend
  #   ports:
  #     - ${FRONTEND_EXTERNAL_PORT}:${FRONTEND_INTERNAL_PORT}
  #     - ${FRONTEND_EXTERNAL_DEBUG_PORT}:${FRONTEND_INTERNAL_DEBUG_PORT}
  #   networks:
  #     - constrsw
  #   depends_on:
  #     bff:
  #       condition: service_healthy
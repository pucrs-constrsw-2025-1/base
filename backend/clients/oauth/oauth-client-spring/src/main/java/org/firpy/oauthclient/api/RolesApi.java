/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.firpy.oauthclient.api;

import org.firpy.oauthclient.model.CreateRoleRequest;
import org.firpy.oauthclient.model.OAuthError;
import org.firpy.oauthclient.model.PatchRoleRequest;
import org.firpy.oauthclient.model.RoleRepresentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T02:27:35.543660400-03:00[America/Sao_Paulo]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "roles-controller", description = "the roles-controller API")
public interface RolesApi {

    /**
     * POST /roles
     *
     * @param createRoleRequest  (required)
     * @return Role created (status code 201)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or Role already exists (status code 409)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "createRole",
        tags = { "roles-controller" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Role created", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RoleRepresentation.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Role already exists", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping(
        value = "/roles",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<RoleRepresentation> createRole(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "CreateRoleRequest", description = "", required = true) @Valid @RequestBody CreateRoleRequest createRoleRequest
    );


    /**
     * DELETE /roles/{role-name}
     *
     * @param roleName  (required)
     * @return Role deleted (status code 204)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or Role not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "deleteRole",
        tags = { "roles-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Role deleted", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Role not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @DeleteMapping(
        value = "/roles/{role-name}",
        produces = { "*/*" }
    )
    
    ResponseEntity<Object> deleteRole(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "role-name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("role-name") String roleName
    );


    /**
     * GET /roles/{role-name}
     *
     * @param roleName  (required)
     * @return Role retrieved (status code 200)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or Role not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "getRole",
        tags = { "roles-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Role retrieved", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RoleRepresentation.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Role not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping(
        value = "/roles/{role-name}",
        produces = { "*/*" }
    )
    
    ResponseEntity<RoleRepresentation> getRole(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "role-name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("role-name") String roleName
    );


    /**
     * GET /roles
     *
     * @return Roles retrieved (status code 200)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "getRoles",
        tags = { "roles-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Roles retrieved", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = RoleRepresentation.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping(
        value = "/roles",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<RoleRepresentation>> getRoles(
        @RequestHeader("Authorization") String accessToken
    );


    /**
     * PATCH /roles/{role-name}
     *
     * @param roleName  (required)
     * @param patchRoleRequest  (required)
     * @return Role updated (status code 204)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or Role not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "patchRole",
        tags = { "roles-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Role updated", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Role not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PatchMapping(
        value = "/roles/{role-name}",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<Object> patchRole(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "role-name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("role-name") String roleName,
        @Parameter(name = "PatchRoleRequest", description = "", required = true) @Valid @RequestBody PatchRoleRequest patchRoleRequest
    );


    /**
     * PUT /roles/{role-name}
     *
     * @param roleName  (required)
     * @param createRoleRequest  (required)
     * @return Role updated (status code 204)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or Role not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "updateRole",
        tags = { "roles-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Role updated", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Role not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PutMapping(
        value = "/roles/{role-name}",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<Object> updateRole(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "role-name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("role-name") String roleName,
        @Parameter(name = "CreateRoleRequest", description = "", required = true) @Valid @RequestBody CreateRoleRequest createRoleRequest
    );

}

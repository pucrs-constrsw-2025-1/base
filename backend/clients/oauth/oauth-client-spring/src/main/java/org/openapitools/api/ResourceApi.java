/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T02:27:35.543660400-03:00[America/Sao_Paulo]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "authorization-controller", description = "the authorization-controller API")
public interface ResourceApi {

    /**
     * POST /{resource}
     *
     * @param resource  (required)
     * @return User is authorized to create resource (status code 200)
     *         or User is not authorized to create resource (status code 403)
     *         or Invalid resource (status code 400)
     */
    @Operation(
        operationId = "isAuthorizedToCreate",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is authorized to create resource"),
            @ApiResponse(responseCode = "403", description = "User is not authorized to create resource"),
            @ApiResponse(responseCode = "400", description = "Invalid resource")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping("/{resource}")
    
    ResponseEntity<Void> isAuthorizedToCreate(
        @Parameter(name = "resource", description = "", required = true, in = ParameterIn.PATH) @PathVariable String resource
    );


    /**
     * DELETE /{resource}
     *
     * @param resource  (required)
     * @return User is authorized to delete resource (status code 200)
     *         or User is not authorized to delete resource (status code 403)
     *         or Invalid resource (status code 400)
     */
    @Operation(
        operationId = "isAuthorizedToDelete",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is authorized to delete resource"),
            @ApiResponse(responseCode = "403", description = "User is not authorized to delete resource"),
            @ApiResponse(responseCode = "400", description = "Invalid resource")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @DeleteMapping("/{resource}")
    
    ResponseEntity<Void> isAuthorizedToDelete(
        @Parameter(name = "resource", description = "", required = true, in = ParameterIn.PATH) @PathVariable String resource
    );


    /**
     * GET /{resource}
     *
     * @param resource  (required)
     * @return User is authorized to get resource (status code 200)
     *         or User is not authorized to get resource (status code 403)
     *         or Invalid resource (status code 400)
     */
    @Operation(
        operationId = "isAuthorizedToGet",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is authorized to get resource"),
            @ApiResponse(responseCode = "403", description = "User is not authorized to get resource"),
            @ApiResponse(responseCode = "400", description = "Invalid resource")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping("/{resource}")
    
    ResponseEntity<Void> isAuthorizedToGet(
        @Parameter(name = "resource", description = "", required = true, in = ParameterIn.PATH) @PathVariable String resource
    );


    /**
     * PATCH /{resource}
     *
     * @param resource  (required)
     * @return User is authorized to patch resource (status code 200)
     *         or User is not authorized to patch resource (status code 403)
     *         or Invalid resource (status code 400)
     */
    @Operation(
        operationId = "isAuthorizedToPatch",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is authorized to patch resource"),
            @ApiResponse(responseCode = "403", description = "User is not authorized to patch resource"),
            @ApiResponse(responseCode = "400", description = "Invalid resource")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PatchMapping("/{resource}")
    
    ResponseEntity<Void> isAuthorizedToPatch(
        @Parameter(name = "resource", description = "", required = true, in = ParameterIn.PATH) @PathVariable String resource
    );


    /**
     * PUT /{resource}
     *
     * @param resource  (required)
     * @return User is authorized to put resource (status code 200)
     *         or User is not authorized to put resource (status code 403)
     *         or Invalid resource (status code 400)
     */
    @Operation(
        operationId = "isAuthorizedToPut",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is authorized to put resource"),
            @ApiResponse(responseCode = "403", description = "User is not authorized to put resource"),
            @ApiResponse(responseCode = "400", description = "Invalid resource")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PutMapping("/{resource}")
    
    ResponseEntity<Void> isAuthorizedToPut(
        @Parameter(name = "resource", description = "", required = true, in = ParameterIn.PATH) @PathVariable String resource
    );

}

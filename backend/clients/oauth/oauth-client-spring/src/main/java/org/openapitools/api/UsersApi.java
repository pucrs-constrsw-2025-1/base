/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateUserRequest;
import org.openapitools.model.CreateUserResponse;
import org.openapitools.model.GetUserResponse;
import org.openapitools.model.KeycloakUserInfo;
import org.openapitools.model.OAuthError;
import org.openapitools.model.RoleRepresentation;
import org.openapitools.model.UpdateUserPasswordRequest;
import org.openapitools.model.UpdateUserRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T02:27:35.543660400-03:00[America/Sao_Paulo]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "users-controller", description = "the users-controller API")
public interface UsersApi {

    /**
     * POST /users
     *
     * @param createUserRequest  (required)
     * @return User created (status code 201)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User already exists (status code 409)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "createUser",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = CreateUserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "409", description = "User already exists", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping(
        value = "/users",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<CreateUserResponse> createUser(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "CreateUserRequest", description = "", required = true) @Valid @RequestBody CreateUserRequest createUserRequest
    );


    /**
     * POST /users/{id}/role-mappings
     *
     * @param id  (required)
     * @param requestBody  (required)
     * @return Role mappings created (status code 201)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "createUserRoleMappings",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Role mappings created", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping(
        value = "/users/{id}/role-mappings",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<OAuthError> createUserRoleMappings(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id,
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody List<String> requestBody
    );


    /**
     * DELETE /users/{id}
     *
     * @param id  (required)
     * @return User disabled successfully (status code 200)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     *         or Failed to disable user (status code 500)
     */
    @Operation(
        operationId = "deleteUser",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User disabled successfully", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Failed to disable user", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @DeleteMapping(
        value = "/users/{id}",
        produces = { "*/*" }
    )
    
    ResponseEntity<String> deleteUser(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id
    );


    /**
     * DELETE /users/{id}/role-mappings
     *
     * @param id  (required)
     * @param requestBody  (required)
     * @return Role mappings deleted (status code 204)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "deleteUserRoleMappings",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Role mappings deleted", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @DeleteMapping(
        value = "/users/{id}/role-mappings",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<Object> deleteUserRoleMappings(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id,
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody List<String> requestBody
    );


    /**
     * GET /users/current
     *
     * @return User retrieved (status code 200)
     *         or Invalid access token (status code 401)
     */
    @Operation(
        operationId = "getCurrentUser",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User retrieved", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = KeycloakUserInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping(
        value = "/users/current",
        produces = { "*/*" }
    )
    
    ResponseEntity<KeycloakUserInfo> getCurrentUser(
        @RequestHeader("Authorization") String accessToken
    );


    /**
     * GET /users/{id}
     *
     * @param id  (required)
     * @return User retrieved (status code 200)
     *         or Invalid request or user not found (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUser",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User retrieved", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GetUserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request or user not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping(
        value = "/users/{id}",
        produces = { "*/*" }
    )
    
    ResponseEntity<GetUserResponse> getUser(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id
    );


    /**
     * GET /users/{id}/role-mappings
     *
     * @param id  (required)
     * @return User role mappings retrieved (status code 200)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "getUserRoleMappings",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User role mappings retrieved", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = RoleRepresentation.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping(
        value = "/users/{id}/role-mappings",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<RoleRepresentation>> getUserRoleMappings(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id
    );


    /**
     * GET /users
     *
     * @param username  (optional)
     * @param firstName  (optional)
     * @param lastName  (optional)
     * @param email  (optional)
     * @param enabled  (optional)
     * @return Users retrieved (status code 200)
     *         or An unexpected error occurred (status code 500)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     */
    @Operation(
        operationId = "getUsers",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users retrieved", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = GetUserResponse.class)))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @GetMapping(
        value = "/users",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<GetUserResponse>> getUsers(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "username", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(required = false) String username,
        @Parameter(name = "firstName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(required = false) String firstName,
        @Parameter(name = "lastName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(required = false) String lastName,
        @Parameter(name = "email", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(required = false) String email,
        @Parameter(name = "enabled", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(required = false) Boolean enabled
    );


    /**
     * PUT /users/{id}
     *
     * @param id  (required)
     * @param updateUserRequest  (required)
     * @return User updated (status code 204)
     *         or Invalid request (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "updateUser",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User updated"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PutMapping(
        value = "/users/{id}",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<Void> updateUser(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id,
        @Parameter(name = "UpdateUserRequest", description = "", required = true) @Valid @RequestBody UpdateUserRequest updateUserRequest
    );


    /**
     * PATCH /users/{id}
     *
     * @param id  (required)
     * @param updateUserPasswordRequest  (required)
     * @return User password updated (status code 204)
     *         or Invalid request or email (status code 400)
     *         or Invalid access token (status code 401)
     *         or Access token lacks required admin scopes (status code 403)
     *         or User not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "updateUserPassword",
        tags = { "users-controller" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User password updated"),
            @ApiResponse(responseCode = "400", description = "Invalid request or email", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access token lacks required admin scopes", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PatchMapping(
        value = "/users/{id}",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<Void> updateUserPassword(
        @RequestHeader("Authorization") String accessToken,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable String id,
        @Parameter(name = "UpdateUserPasswordRequest", description = "", required = true) @Valid @RequestBody UpdateUserPasswordRequest updateUserPasswordRequest
    );

}

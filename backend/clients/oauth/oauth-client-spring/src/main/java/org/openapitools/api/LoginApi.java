/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessToken;
import org.openapitools.model.IntrospectionResponse;
import org.openapitools.model.LoginRequest;
import org.openapitools.model.OAuthError;
import org.openapitools.model.RefreshTokenRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T02:27:35.543660400-03:00[America/Sao_Paulo]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "authentication-controller", description = "the authentication-controller API")
public interface LoginApi {

    /**
     * POST /login/introspect
     *
     * @param accessTokenToInspect  (required)
     * @return Introspect successful (status code 200)
     *         or Invalid access token (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "introspectToken",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Introspect successful", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = IntrospectionResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping(
        value = "/login/introspect",
        produces = { "*/*" }
    )
    
    ResponseEntity<IntrospectionResponse> introspectToken(
        @NotNull @Parameter(name = "accessTokenToInspect", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(required = true) String accessTokenToInspect
    );


    /**
     * POST /login
     *
     * @param loginRequest  (required)
     * @return Login successful (status code 200)
     *         or Invalid email or password (status code 401)
     */
    @Operation(
        operationId = "login",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login successful", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccessToken.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid email or password", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping(
        value = "/login",
        produces = { "*/*" },
        consumes = "application/json"
    )
    
    ResponseEntity<AccessToken> login(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    );


    /**
     * POST /login/refresh
     *
     * @param request  (required)
     * @return Login with refresh token successful (status code 200)
     *         or Could not parse refresh token (status code 400)
     *         or Invalid refresh token (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @Operation(
        operationId = "loginWithRefreshToken",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login with refresh token successful", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = AccessToken.class))
            }),
            @ApiResponse(responseCode = "400", description = "Could not parse refresh token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid refresh token", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected error occurred", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OAuthError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PostMapping(
        value = "/login/refresh",
        produces = { "*/*" }
    )
    
    ResponseEntity<AccessToken> loginWithRefreshToken(
        @NotNull @Parameter(name = "request", description = "", required = true, in = ParameterIn.QUERY) @Valid RefreshTokenRequest request
    );

}
